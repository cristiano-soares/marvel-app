{"version":3,"sources":["components/Loader/index.jsx","components/SearchInput/index.jsx","components/ComicDetails/index.jsx","components/ComicCard/index.jsx","components/Comics/index.jsx","components/Footer/index.jsx","components/EmailForm/index.jsx","utils/email-service.js","App.js","utils/use-comic-search.js","reportWebVitals.js","index.js"],"names":["Loader","className","SearchInput","onChange","type","placeholder","ComicDetails","comic","onClose","onSelect","src","thumbnail","path","extension","alt","title","pageCount","isSelected","onClick","ComicCard","onClickTitle","imagePath","Comics","comics","lastComicElementRef","checkSelectedComic","handleSelection","handleShowDetails","map","index","length","ref","e","Footer","selectedComics","onOpenMailForm","onCancelSelection","size","EmailForm","onCancelSendMail","useState","email","setEmail","loading","setLoading","emailSent","setEmailSent","mailContent","setMailContent","useEffect","emailInput","document","getElementById","focus","content","forEach","getMailContent","id","name","value","target","form","emailjs","sendForm","sendMail","then","App","query","setQuery","openedComic","setOpenedComic","pageNumber","setPageNumber","Set","setSelectedComics","showMailForm","setShowMailForm","error","setError","setComics","hasMore","setHasMore","cancel","offset","params","titleStartsWith","axios","baseURL","timeout","method","responseType","cancelToken","CancelToken","c","res","results","data","prevComics","catch","isCancel","useComicSearch","observer","useRef","useCallback","node","current","disconnect","IntersectionObserver","entries","isIntersecting","prevPageNumber","observe","selected","has","delete","add","handleSelectionCancel","handleDetailsClose","preventDefault","stopPropagation","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.47782285.chunk.js","sourcesContent":["import './styles.scss';\r\n\r\nexport const Loader = () => (\r\n    <div className=\"spinner-grow-backdrop\">\r\n        <div className=\"spinner-grow\"></div>\r\n    </div>\r\n)","import './styles.scss';\r\n\r\nexport const SearchInput = ({ onChange }) => (\r\n    <div className=\"search-wrapper\">\r\n        <input type=\"search\" className=\"search-box\" placeholder=\"Qual quadrinho você procura?\" onChange={onChange} />\r\n    </div>\r\n)","import './styles.scss';\r\n\r\nexport const ComicDetails = ({ comic, onClose, onSelect }) => (\r\n    <div className=\"details-wrapper\">\r\n        <div className=\"details-content\">\r\n            <img src={comic.thumbnail.path + '.' + comic.thumbnail.extension} alt={comic.title} />\r\n            <div className=\"details-overview\">\r\n                <div className=\"overview-body\">\r\n                    <h2>{comic.title}</h2>\r\n                    <p>\r\n                        Número de páginas: {comic.pageCount === 0 ? (<em>Não informado</em>) : comic.pageCount}\r\n                    </p>\r\n                </div>\r\n                <div className=\"overview-footer\">\r\n                    {\r\n                        !comic.isSelected && (\r\n                            <button type=\"button\" onClick={onSelect}>Selecionar e fechar</button>\r\n                        )\r\n                    }\r\n                    <button type=\"button\" onClick={onClose}>Fechar</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n)","export function ComicCard({ comic, onClickTitle }) {\r\n    const imagePath = `${comic.thumbnail.path}.${comic.thumbnail.extension}`;\r\n    return (\r\n        <>\r\n            <img className=\"comic-cover\" src={imagePath} alt={comic.title} />\r\n            <button className=\"comic-title\" title=\"Ver detalhes do quadrinho\" onClick={onClickTitle}>{comic.title}</button>\r\n        </>\r\n    )\r\n}\r\n\r\n","import { ComicCard } from '../ComicCard';\r\nimport './styles.scss';\r\n\r\nexport const Comics = ({ comics, lastComicElementRef, checkSelectedComic, handleSelection, handleShowDetails }) => (\r\n    <ul className=\"comics-wrapper\">\r\n        {\r\n            comics.map((comic, index) => {\r\n\r\n                if (comics.length === index + 1) {\r\n                    return (\r\n                        // Aqui mantive a li externa ao componente ComicCard devido ao uso do IntersectionObserver para o scroll infinito\r\n                        // Seria necessário rever isso no futuro\r\n                        <li ref={lastComicElementRef} key={index} className={\"comic\" + (checkSelectedComic(comic) ? ' selected' : '')} onClick={() => handleSelection(comic)}>\r\n                            <ComicCard comic={comic} onClickTitle={e => handleShowDetails(e, comic)}></ComicCard>\r\n                        </li>\r\n                    )\r\n                } else {\r\n                    return (\r\n                        <li key={index} className={\"comic\" + (checkSelectedComic(comic) ? ' selected' : '')} onClick={() => handleSelection(comic)}>\r\n                            <ComicCard comic={comic} onClickTitle={e => handleShowDetails(e, comic)}></ComicCard>\r\n                        </li>\r\n                    )\r\n                }\r\n            })}\r\n    </ul>\r\n)","import './styles.scss';\r\n\r\nexport const Footer = ({ selectedComics, onOpenMailForm, onCancelSelection }) => (\r\n    <div className=\"footer\">\r\n        <span>{selectedComics.size + (selectedComics.size > 1 ? ' quadrinhos selecionados' : ' quadrinho selecionado')}</span>\r\n        <button type=\"button\" onClick={onOpenMailForm}>Enviar por e-mail</button>\r\n        <button type=\"button\" onClick={onCancelSelection}>Cancelar</button>\r\n    </div>\r\n)","import React, { useState, useEffect } from 'react';\r\nimport { sendMail } from '../../utils/email-service';\r\nimport { Loader } from '../Loader';\r\nimport './styles.scss';\r\n\r\nexport function EmailForm({ onCancelSendMail, selectedComics }) {\r\n    const [email, setEmail] = useState('');\r\n    const [loading, setLoading] = useState(false);\r\n    const [emailSent, setEmailSent] = useState(false);\r\n    const [mailContent, setMailContent] = useState('');\r\n\r\n    useEffect(() => {\r\n        const emailInput = document.getElementById('email');\r\n        if (!emailInput) {\r\n            return;\r\n        }\r\n        emailInput.focus();\r\n    });\r\n\r\n    useEffect(() => {\r\n        // Devido ao serviço de e-mail utilizado, foi necessário incluir o html do corpo do e-mail em uma textarea\r\n        const getMailContent = () => {\r\n            let content = '<ul style=\"padding: 0; list-style:none;\">';\r\n            selectedComics.forEach(comic => {\r\n                content += `<li style=\"margin: 8px;\">\r\n            <img src=${comic.thumbnail.path}.${comic.thumbnail.extension} alt=${comic.title} width=\"200px\" />\r\n            <br/>\r\n            <span style=\"margin: 8px 0 16px 0;\">${comic.title}</span>\r\n            </li>`;\r\n            });\r\n            content += '</ul>';\r\n            return content;\r\n        }\r\n        setMailContent(getMailContent())\r\n    }, [selectedComics]);\r\n\r\n    const handleSendMail = () => {\r\n        setLoading(true);\r\n        // Este form é necessário para o serviço de e-mail utilizado\r\n        const form = document.getElementById('emailForm');\r\n        sendMail(form, email).then(() => {\r\n            setLoading(false);\r\n            setEmailSent(true);\r\n        });\r\n    }\r\n\r\n    const handleEmailChange = e => {\r\n        setEmail(e.target.value);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {\r\n                loading && (\r\n                    <Loader></Loader>\r\n                )\r\n            }\r\n            <div className=\"modal\">\r\n                <div className=\"modal-content\">\r\n                    <div className=\"modal-header\">\r\n                        <h2>Enviar quadrinhos por e-mail</h2>\r\n                    </div>\r\n                    <div className=\"modal-body\">\r\n                        {\r\n                            !emailSent &&\r\n                            (\r\n                                <form id=\"emailForm\" className=\"mail-form\">\r\n                                    <input id=\"email\" type=\"email\" name=\"user_email\" placeholder=\"Digite seu e-mail aqui\" value={email} onChange={handleEmailChange} />\r\n                                    <textarea name=\"message\" value={mailContent}></textarea>\r\n                                </form>\r\n                            )\r\n                        }\r\n                        {\r\n                            emailSent && (\r\n                                <p>Seu e-mail foi enviado com sucesso!</p>\r\n                            )\r\n                        }\r\n                    </div>\r\n                    <div className=\"modal-footer\">\r\n                        {\r\n                            !emailSent && (\r\n                                <button type=\"button\" onClick={handleSendMail}>Enviar</button>\r\n                            )\r\n                        }\r\n                        <button type=\"button\" onClick={onCancelSendMail}>{emailSent ? 'Ok' : 'Cancelar'}</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}","import emailjs from 'emailjs-com';\r\n\r\nexport const sendMail = form => {\r\n    return emailjs.sendForm('service_sijp3it', 'template_v4wyes2', form, 'user_OByWmLBYYUNd6TeliICaD');\r\n}\r\n\r\n","import React, { useState, useRef, useCallback } from 'react';\nimport useComicSearch from './utils/use-comic-search';\nimport { Loader } from './components/Loader';\nimport './App.scss';\nimport { SearchInput } from './components/SearchInput';\nimport { ComicDetails } from './components/ComicDetails';\nimport { Comics } from './components/Comics';\nimport { Footer } from './components/Footer';\nimport { EmailForm } from './components/EmailForm';\n\nexport default function App() {\n  const [query, setQuery] = useState('');\n  const [openedComic, setOpenedComic] = useState(null);\n  const [pageNumber, setPageNumber] = useState(1);\n  const [selectedComics, setSelectedComics] = useState(new Set());\n  const [showMailForm, setShowMailForm] = useState(false);\n\n  const {\n    comics,\n    hasMore,\n    loading,\n    error\n  } = useComicSearch(query, pageNumber)\n\n  const observer = useRef();\n  const lastComicElementRef = useCallback(node => {\n    if (loading) return\n    if (observer.current) observer.current.disconnect()\n    observer.current = new IntersectionObserver(entries => {\n      if (entries[0].isIntersecting && hasMore) {\n        setPageNumber(prevPageNumber => prevPageNumber + 1)\n      }\n    })\n    if (node) observer.current.observe(node)\n  }, [loading, hasMore])\n\n  const handleSearch = e => {\n    setQuery(e.target.value)\n    setPageNumber(1)\n  }\n\n  const handleSelection = comic => {\n    const selected = new Set(selectedComics);\n    if (selected.has(comic)) {\n      selected.delete(comic);\n    } else {\n      selected.add(comic);\n    }\n    setSelectedComics(selected);\n  }\n\n  const checkSelectedComic = comic => {\n    return selectedComics.has(comic);\n  };\n\n  const handleSelectionClose = () => {\n    handleSelection(openedComic);\n    handleDetailsClose();\n  }\n\n  const handleSelectionCancel = () => {\n    setSelectedComics(new Set());\n  }\n\n  const handleShowDetails = (e, comic) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setOpenedComic(comic);\n  }\n\n  const handleDetailsClose = () => {\n    setOpenedComic(null);\n  }\n\n  const handleOpenMailForm = () => {\n    setShowMailForm(true);\n  }\n  const handleCloseMailForm = () => {\n    handleSelectionCancel();\n    setShowMailForm(false);\n  }\n\n  return (\n    <div className=\"container\">\n      <SearchInput onChange={handleSearch}></SearchInput>\n      {\n        loading && (\n          <Loader></Loader>\n        )\n      }\n\n      {\n        openedComic && (\n          <ComicDetails\n            comic={openedComic}\n            onClose={handleDetailsClose}\n            onSelect={handleSelectionClose}></ComicDetails>\n        )\n      }\n      <Comics\n        comics={comics}\n        lastComicElementRef={lastComicElementRef}\n        checkSelectedComic={checkSelectedComic}\n        handleSelection={handleSelection}\n        handleShowDetails={handleShowDetails}></Comics>\n\n      {\n        (loading && comics.length > 0) && (\n          <div className=\"spinner-grow spinner-grow-sm loader-inline\"></div>\n        )\n      }\n      {\n        (!loading && !error && comics.length === 0) && (\n          <h3>Nenhum quadrinho encontrado</h3>\n        )\n      }\n\n      {\n        error && (\n          <h3>Ocorreu um erro ao se comunicar com o servidor da Marvel</h3>\n        )\n      }\n\n      {\n        selectedComics.size > 0 && (\n          <Footer\n            selectedComics={selectedComics}\n            onOpenMailForm={handleOpenMailForm}\n            onCancelSelection={handleSelectionCancel}></Footer>\n        )\n      }\n      {\n        showMailForm && (\n          <EmailForm\n            onCancelSendMail={handleCloseMailForm}\n            selectedComics={selectedComics}></EmailForm>\n        )\n      }\n    </div>\n  )\n\n}","import { useEffect, useState } from 'react'\r\nimport axios from 'axios'\r\n\r\nexport default function useComicSearch(query, pageNumber) {\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(false);\r\n  const [comics, setComics] = useState([]);\r\n  const [hasMore, setHasMore] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setComics([])\r\n  }, [query])\r\n\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    setError(false);\r\n    let cancel;\r\n    let offset = 0;\r\n    const limit = 20;\r\n    if (pageNumber > 1) {\r\n      offset = pageNumber * limit;\r\n    }\r\n    const params = {\r\n      'apikey': '44db65d7e1952869be0451a4c5426eda',\r\n      'hash': 'ffd275c5130566a2916217b101f26150',\r\n      'limit': limit,\r\n      'offset': offset,\r\n      'orderBy': 'title',\r\n      'noVariants': true\r\n    }\r\n\r\n    if (query) {\r\n      params.titleStartsWith = query;\r\n    }\r\n    axios({\r\n      baseURL: 'https://gateway.marvel.com/v1/public/comics',\r\n      params,\r\n      timeout: 10000,\r\n      method: 'get',\r\n      responseType: 'json',\r\n      cancelToken: new axios.CancelToken(c => cancel = c)\r\n    }).then(res => {\r\n      const results = res.data.data.results;\r\n      setComics(prevComics => {\r\n        return [...new Set([...prevComics, ...results])];\r\n      });\r\n      setHasMore(results.length > 0);\r\n      setLoading(false);\r\n    }).catch(e => {\r\n      if (axios.isCancel(e)) return\r\n      setError(true);\r\n      setLoading(false);\r\n    });\r\n    return () => cancel()\r\n  }, [query, pageNumber])\r\n\r\n  return { loading, error, comics, hasMore }\r\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}